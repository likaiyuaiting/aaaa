[cpp] view plain copy
print?

    typedef struct {  
        char *buffer;  
        int length;  
        int offset;  
    } printbuffer;  
      
      
      
    static int pow2gt(int x)        /*返回 一个比x的n(其中n是2的幂),并且是最小的幂，说白了就是将一个数后边所有的位都置1然后再+1*/  
    {  
        --x;  
        x |= x >> 1;  
        x |= x >> 2;  
        x |= x >> 4;  
        x |= x >> 8;  
        x |= x >> 16;  
        return x + 1;  
    }  
      
    /* ensure 函数 是一个 协助 printbuffer 分配内存的一个函数   
     * len 表示当前字符串的字符串起始偏移量 即 newbuffer+p->offset 起始的 
     */  
      
    static char* ensure(printbuffer *p,int needed)  
    {  
        char *newbuffer;int newsize;  
        if (!p || !p->buffer) return 0;//传入参数合法性检测  
        needed+=p->offset;//需要额外分配的内存 也就是偏移量  
        if (needed<=p->length) return p->buffer+p->offset;//内存够用直接返回  
        newsize=pow2gt(needed);  
        newbuffer=(char*)cJSON_malloc(newsize);//malloc出新内存 放buffer里面的内容  
        if (!newbuffer) {cJSON_free(p->buffer);p->length=0,p->buffer=0;return 0;}  
        if (newbuffer) memcpy(newbuffer,p->buffer,p->length);//  
        cJSON_free(p->buffer);//  
        p->length=newsize;  
        p->buffer=newbuffer;  
        return newbuffer+p->offset;//  
    }  
      
    char *cJSON_Print(cJSON * item)  
    {  
        return print_value(item, 0, 1, 0);  
    }  
      
    static char *print_value(cJSON * item, int depth, int fmt, printbuffer * p)  
    {  
        char *out = 0;  
      
        if (!item)  
            return 0;  
        if (p) {  
            switch ((item->type) & 255) {  
            case cJSON_NULL:{  
                    out = ensure(p, 5);  
                    if (out)  
                        strcpy(out, "null");  
                    break;  
                }  
            case cJSON_False:{  
                    out = ensure(p, 6);  
                    if (out)  
                        strcpy(out, "false");  
                    break;  
                }  
            case cJSON_True:{  
                    out = ensure(p, 5);  
                    if (out)  
                        strcpy(out, "true");  
                    break;  
                }  
            case cJSON_Number:  
                out = print_number(item, p);  //打印数字函数  
                break;  
            case cJSON_String:  
                out = print_string(item, p);  //打印字符串函数  
                break;  
            case cJSON_Array:  
                out = print_array(item, depth, fmt, p);  //打印数组函数  
                break;  
            case cJSON_Object:  
                out = print_object(item, depth, fmt, p);  //打印object对象类型的函数  
                break;  
            }  
        } else {  
            switch ((item->type) & 255) {  
            case cJSON_NULL:  
                out = cJSON_strdup("null");  
                break;  
            case cJSON_False:  
                out = cJSON_strdup("false");  
                break;  
            case cJSON_True:  
                out = cJSON_strdup("true");  
                break;  
            case cJSON_Number:  
                out = print_number(item, 0);  
                break;  
            case cJSON_String:  
                out = print_string(item, 0);  
                break;  
            case cJSON_Array:  
                out = print_array(item, depth, fmt, 0);  
                break;  
            case cJSON_Object:  
                out = print_object(item, depth, fmt, 0);  
                break;  
            }  
        }  
        return out;  
    }  
      
      
    static char *print_number(cJSON * item, printbuffer * p)  //打印数字函数  
    {  
        char *str = 0;  
        double d = item->valuedouble;  
      
        if (d == 0) {  
            if (p)  
                str = ensure(p, 2);  
            else  
                str = (char *) cJSON_malloc(2); /* special case for 0. */  
            if (str)  
                strcpy(str, "0");  
        } else if (fabs(((double) item->valueint) - d) <= DBL_EPSILON  
               && d <= INT_MAX && d >= INT_MIN) {  
            if (p)  
                str = ensure(p, 21);  
            else  
                str = (char *) cJSON_malloc(21);    /* 2 ^ 64 + 1可以用21个字符表示 */  
            if (str)  
                sprintf(str, "%d", item->valueint);  
        } else {  
            if (p)  
                str = ensure(p, 64);  
            else  
                str = (char *) cJSON_malloc(64);    /* This is a nice tradeoff. */  
            if (str) {  
                if (fpclassify(d) != FP_ZERO && !isnormal(d)) //非正常浮点数  
                    sprintf(str, "null");  
                else if (fabs(floor(d) - d) <= DBL_EPSILON  
                     && fabs(d) < 1.0e60)  
                    sprintf(str, "%.0f", d);  
                else if (fabs(d) < 1.0e-6 || fabs(d) > 1.0e9)  
                    sprintf(str, "%e", d);  
                else  
                    sprintf(str, "%f", d);  
            }  
        }  
        return str;  
    }  
      
      
    static char *print_string(cJSON * item, printbuffer * p) //打印字符串类型的结点  
    {  
        return print_string_ptr(item->valuestring, p);  
    }  
      
    static char *print_string_ptr(const char *str, printbuffer * p)   //打印字符串类型的结点  
    {  
        const char *ptr;  
        char *ptr2, *out;  
        int len = 0, flag = 0;  
        unsigned char token;  
      
        if (!str) {  
            if (p)  
                out = ensure(p, 3);  
            else  
                out = (char *) cJSON_malloc(3);  
            if (!out)  
                return 0;  
            strcpy(out, "\"\"");     //字符串为空  
            return out;  
        }  
      
        for (ptr = str; *ptr; ptr++)  
            flag |= ((*ptr > 0 && *ptr < 32) || (*ptr == '\"')  
                 || (*ptr == '\\')) ? 1 : 0;  
        if (!flag) {            //对字符串中不含'\','/'，空格等字符的字符处理  
            len = ptr - str;  
            if (p)  
                out = ensure(p, len + 3);  
            else  
                out = (char *) cJSON_malloc(len + 3);  
            if (!out)  
                return 0;  
            ptr2 = out;  
            *ptr2++ = '\"';  
            strcpy(ptr2, str);  
            ptr2[len] = '\"';  
            ptr2[len + 1] = 0;  
            return out;  
        }  
      
        ptr = str;  
        while ((token = *ptr) && ++len) {  
            if (strchr("\"\\\b\f\n\r\t", token))  
                len++;  
            else if (token < 32)  
                len += 5;  
            ptr++;  
        }  
      
        if (p)  
            out = ensure(p, len + 3);  
        else  
            out = (char *) cJSON_malloc(len + 3);  
        if (!out)  
            return 0;  
      
        ptr2 = out;  
        ptr = str;  
        *ptr2++ = '\"';  
        while (*ptr) {  
            if ((unsigned char) *ptr > 31 && *ptr != '\"'  
                && *ptr != '\\')  
                *ptr2++ = *ptr++;  
            else {  
                *ptr2++ = '\\';  
                switch (token = *ptr++) {  
                case '\\':  
                    *ptr2++ = '\\';  
                    break;  
                case '\"':  
                    *ptr2++ = '\"';  
                    break;  
                case '\b':  
                    *ptr2++ = 'b';  
                    break;  
                case '\f':  
                    *ptr2++ = 'f';  
                    break;  
                case '\n':  
                    *ptr2++ = 'n';  
                    break;  
                case '\r':  
                    *ptr2++ = 'r';  
                    break;  
                case '\t':  
                    *ptr2++ = 't';  
                    break;  
                default:  
                    sprintf(ptr2, "u%04x", token);  
                    ptr2 += 5;  
                    break;  /* escape and print */  
                }  
            }  
        }  
        *ptr2++ = '\"';  
        *ptr2++ = 0;  
        return out;  
    }  
      
      
    static char *print_array(cJSON * item, int depth, int fmt, printbuffer * p)   //打印数组类型结点函数  
    {  
        char **entries;  
        char *out = 0, *ptr, *ret;  
        int len = 5;  
        cJSON *child = item->child;  
        int numentries = 0, i = 0, fail = 0;  
        size_t tmplen = 0;  
      
        /* 数组里有多少个元素 */  
        while (child)  
            numentries++, child = child->next;  
        /* 明确处理numentries = = 0 */   //处理空数组  
        if (!numentries) {  
            if (p)  
                out = ensure(p, 3);  
            else  
                out = (char *) cJSON_malloc(3);  
            if (out)  
                strcpy(out, "[]");  
            return out;  
        }  
      
        if (p) {  
            /* 组成数组的输出形式 */  
            i = p->offset;  
            ptr = ensure(p, 1);  
            if (!ptr)  
                return 0;  
            *ptr = '[';  
            p->offset++;  
            child = item->child;  
            while (child && !fail) {  
                print_value(child, depth + 1, fmt, p);  
                p->offset = update(p);  
                if (child->next) {  
                    len = fmt ? 2 : 1;  
                    ptr = ensure(p, len + 1);  
                    if (!ptr)  
                        return 0;  
                    *ptr++ = ',';  
                    if (fmt)  
                        *ptr++ = ' ';  
                    *ptr = 0;  
                    p->offset += len;  
                }  
                child = child->next;  
            }  
            ptr = ensure(p, 2);  
            if (!ptr)  
                return 0;  
            *ptr++ = ']';  
            *ptr = 0;  
            out = (p->buffer) + i;  
        } else {  
            /* 分配一个指针数组存储数组里的每一个元素的打印结果 */  
            entries =  
                (char **) cJSON_malloc(numentries * sizeof(char *));  
            if (!entries)  
                return 0;  
            memset(entries, 0, numentries * sizeof(char *));  
            /* 检索所有结果: */  
            child = item->child;  
            while (child && !fail) {  
                ret = print_value(child, depth + 1, fmt, 0);  
                entries[i++] = ret;  
                if (ret)  
                    len += strlen(ret) + 2 + (fmt ? 1 : 0);  
                else  
                    fail = 1;  
                child = child->next;  
            }  
      
              
            if (!fail)  
                out = (char *) cJSON_malloc(len);  
              
            if (!out)  
                fail = 1;  
      
          
            if (fail) {  
                for (i = 0; i < numentries; i++)  
                    if (entries[i])  
                        cJSON_free(entries[i]);  
                cJSON_free(entries);  
                return 0;  
            }  
      
            /* 组成数组的输出形式. */  
            *out = '[';  
            ptr = out + 1;  
            *ptr = 0;  
            for (i = 0; i < numentries; i++) {  
                tmplen = strlen(entries[i]);  
                memcpy(ptr, entries[i], tmplen);  
                ptr += tmplen;  
                if (i != numentries - 1) {  
                    *ptr++ = ',';  
                    if (fmt)  
                        *ptr++ = ' ';  
                    *ptr = 0;  
                }  
                cJSON_free(entries[i]);  
            }  
            cJSON_free(entries);  
            *ptr++ = ']';  
            *ptr++ = 0;  
        }  
        return out;  
    }  
      
    /* 打印object类型结点. */  
    static char *print_object(cJSON * item, int depth, int fmt,  printbuffer * p)  
    {  
        char **entries = 0, **names = 0;  
        char *out = 0, *ptr, *ret, *str;  
        int len = 7, i = 0, j;  
        cJSON *child = item->child;  
        int numentries = 0, fail = 0;  
        size_t tmplen = 0;  
      
        /* 统计有多少个子结点. */  
        while (child)  
            numentries++, child = child->next;  
        /* 明确处理空对象的
