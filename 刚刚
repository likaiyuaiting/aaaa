情况*/  
        if (!numentries) {  
            if (p)  
                out = ensure(p, fmt ? depth + 4 : 3);  
            else  
                out = (char *) cJSON_malloc(fmt ? depth + 4 : 3);  
            if (!out)  
                return 0;  
            ptr = out;  
            *ptr++ = '{';  
            if (fmt) {  
                *ptr++ = '\n';  
                for (i = 0; i < depth; i++)  
                    *ptr++ = '\t';  
            }  
            *ptr++ = '}';  
            *ptr++ = 0;  
            return out;  
        }  
        if (p) {  
            /* 组成输出形式: */  
            i = p->offset;  
            len = fmt ? 2 : 1;  
            ptr = ensure(p, len + 1);  
            if (!ptr)  
                return 0;  
            *ptr++ = '{';  
            if (fmt)  
                *ptr++ = '\n';  
            *ptr = 0;  
            p->offset += len;  
            child = item->child;  
            depth++;  
            while (child) {  
                if (fmt) {  
                    ptr = ensure(p, depth);  
                    if (!ptr)  
                        return 0;  
                    for (j = 0; j < depth; j++)  
                        *ptr++ = '\t';  
                    p->offset += depth;  
                }  
                print_string_ptr(child->string, p);  
                p->offset = update(p);  
      
                len = fmt ? 2 : 1;  
                ptr = ensure(p, len);  
                if (!ptr)  
                    return 0;  
                *ptr++ = ':';  
                if (fmt)  
                    *ptr++ = '\t';  
                p->offset += len;  
      
                print_value(child, depth, fmt, p);  
                p->offset = update(p);  
      
                len = (fmt ? 1 : 0) + (child->next ? 1 : 0);  
                ptr = ensure(p, len + 1);  
                if (!ptr)  
                    return 0;  
                if (child->next)  
                    *ptr++ = ',';  
                if (fmt)  
                    *ptr++ = '\n';  
                *ptr = 0;  
                p->offset += len;  
                child = child->next;  
            }  
            ptr = ensure(p, fmt ? (depth + 1) : 2);  
            if (!ptr)  
                return 0;  
            if (fmt)  
                for (i = 0; i < depth - 1; i++)  
                    *ptr++ = '\t';  
            *ptr++ = '}';  
            *ptr = 0;  
            out = (p->buffer) + i;  
        } else {  
            /*为对象和名称分配空间 */  
            entries =  
                (char **) cJSON_malloc(numentries * sizeof(char *));  
            if (!entries)  
                return 0;  
            names =  
                (char **) cJSON_malloc(numentries * sizeof(char *));  
            if (!names) {  
                cJSON_free(entries);  
                return 0;  
            }  
            memset(entries, 0, sizeof(char *) * numentries);  
            memset(names, 0, sizeof(char *) * numentries);  
      
            /* 将所有结果收集到数组: */  
            child = item->child;  
            depth++;  
            if (fmt)  
                len += depth;  
            while (child && !fail) {  
                names[i] = str =  
                    print_string_ptr(child->string, 0);  
                entries[i++] = ret =  
                    print_value(child, depth, fmt, 0);  
                if (str && ret)  
                    len +=  
                        strlen(ret) + strlen(str) + 2 +  
                        (fmt ? 2 + depth : 0);  
                else  
                    fail = 1;  
                child = child->next;  
            }  
      
      
            if (!fail)  
                out = (char *) cJSON_malloc(len);  
            if (!out)  
                fail = 1;  
      
          
            if (fail) {  
                for (i = 0; i < numentries; i++) {  
                    if (names[i])  
                        cJSON_free(names[i]);  
                    if (entries[i])  
                        cJSON_free(entries[i]);  
                }  
                cJSON_free(names);  
                cJSON_free(entries);  
                return 0;  
            }  
      
            /* 组成输出形式: */  
            *out = '{';  
            ptr = out + 1;  
            if (fmt)  
                *ptr++ = '\n';  
            *ptr = 0;  
            for (i = 0; i < numentries; i++) {  
                if (fmt)  
                    for (j = 0; j < depth; j++)  
                        *ptr++ = '\t';  
                tmplen = strlen(names[i]);  
                memcpy(ptr, names[i], tmplen);  
                ptr += tmplen;  
                *ptr++ = ':';  
                if (fmt)  
                    *ptr++ = '\t';  
                strcpy(ptr, entries[i]);  
                ptr += strlen(entries[i]);  
                if (i != numentries - 1)  
                    *ptr++ = ',';  
                if (fmt)  
                    *ptr++ = '\n';  
                *ptr = 0;  
                cJSON_free(names[i]);  
                cJSON_free(entries[i]);  
            }  
      
            cJSON_free(names);  
            cJSON_free(entries);  
            if (fmt)  
                for (i = 0; i < depth - 1; i++)  
                    *ptr++ = '\t';  
            *ptr++ = '}';  
            *ptr++ = 0;  
        }  
        return out;  
    } 
