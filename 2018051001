#include <malloc.h>
#include <assert.h>
#include <stdio.h>

typedef int DataType;
#define NULL 0


typedef struct Node
{
	DataType _data;
	struct Node* _pNext;
}*PNode;

void InitList(PNode* pHead)
{
	assert(pHead);
	*pHead = NULL;
}

PNode BuyNode(DataType data)
{
	PNode pNewNode = (PNode)malloc(sizeof(struct Node));
	if(NULL == pNewNode)
	{
		assert(0);
		return NULL;
	}

	pNewNode->_data = data;
	pNewNode->_pNext = NULL;
	return pNewNode;
}

// 逆向打印
void PrintList(PNode pHead)
{
	PNode pCur = pHead;
	while(pCur)
	{
		printf("%d--->", pCur->_data);
		pCur = pCur->_pNext;
	}

	printf("NULL\n");
}

void PushBack(PNode* pHead, DataType data)
{
	assert(pHead);
	if(NULL == *pHead)
	{
		*pHead = BuyNode(data);
	}
	else
	{
		PNode pTailNode = *pHead;
		while(pTailNode->_pNext)
		{
			pTailNode = pTailNode->_pNext;
		}

		pTailNode->_pNext = BuyNode(data);
	}
}

// pHead外部实参的地址
void PopBack(PNode* pHead)
{
	if(NULL == *pHead)
		return;
	else if(NULL == (*pHead)->_pNext)
	{
		free(*pHead);
		*pHead = NULL;
	}
	else
	{
		// 找到最后一个节点
		PNode pTailNode = *pHead;
		PNode pPre = NULL;
		while(pTailNode->_pNext)
		{
			pPre = pTailNode;
			pTailNode = pTailNode->_pNext;
		}

		pPre->_pNext = NULL;
		free(pTailNode);
	}
}


void PushFront(PNode* pHead, DataType data)
{
	PNode pNewNode;
	assert(pHead);

	pNewNode = BuyNode(data);
	if(NULL == pNewNode)
		return;

	pNewNode->_pNext = *pHead;
	*pHead = pNewNode;
}

//1--->2--->3    2
PNode Find(PNode pHead, DataType data)
{
	PNode pCur = pHead;
	while(pCur)
	{
		if(pCur->_data == data)
			return pCur;

		pCur = pCur->_pNext;
	}

	return NULL;
}
// 
PNode Insert(PNode pos, DataType data)
{
	PNode pNewNode;
	if(NULL == pos)
		return;

	pNewNode = BuyNode(data);
	if(NULL == pNewNode)
		return NULL;

	pNewNode->_pNext = pos->_pNext;
	pos->_pNext = pNewNode;
}

// 1、参数检测
// 2、边界条件
// 3、逻辑操作
void PopFront(PNode* pHead)
{
	assert(pHead);
	if(*pHead)
	{
		// 一个节点&多个结点
		PNode pDel = *pHead;
		*pHead = (*pHead)->_pNext;
		free(pDel);
	}
}

// 
void Erase(PNode* pHead, PNode pos)
{
	assert(pHead);
	if(NULL == pHead || NULL == pos)
		return;

	if(*pHead == pos)
		PopFront(pHead);
	else
	{
		PNode pCur = *pHead;
		while(pCur)
		{
			if(pCur->_pNext == pos)
				break;
			pCur = pCur->_pNext;
		}

		pCur->_pNext = pos->_pNext;
		free(pos);
	}
}

size_t Size(PNode pHead)
{
	PNode pCur = pHead;
	int count = 0;
	while(pCur)
	{
		count++;
		pCur = pCur->_pNext;
	}

	return count;
}

// 正向销毁---->逆向销毁
void DestroyList(PNode* pHead)
{
	PNode pCur = *pHead;
	PNode pNext = NULL;
	// 1--->2-->NULL
	while(pCur)
	{
		pNext = pCur->_pNext;
		free(pCur);
		pCur = pNext;
	}

	*pHead = NULL;
}


////////////////////////////////////////////////////////////////////
void PrintListFromTail2Head(PNode pHead)
{
	if(pHead)
	{
		PrintListFromTail2Head(pHead->_pNext);
		printf("%d--->", pHead->_data);
	}
}

void DestroyListFromTail2Head(PNode* pHead)
{
	assert(pHead);
	if(*pHead)
	{
		DestroyListFromTail2Head(&(*pHead)->_pNext);
		free(*pHead);
		*pHead = NULL;
	}
}

void DeleteNotTailNode(PNode pos)
{
	PNode pDel;
	if(NULL == pos || NULL == pos->_pNext)
		return;

	pDel = pos->_pNext;
	pos->_data = pDel->_data;
	pos->_pNext = pDel->_pNext;
	free(pDel);
}

void InsertNotHead(PNode pos, DataType data)
{
	PNode pNewNode = NULL;
	if(NULL == pos)
		return;

	pNewNode = BuyNode(pos->_data);
	if(NULL == pNewNode)
		return;

	pNewNode->_pNext = pos->_pNext;
	pos->_pNext = pNewNode;
	pos->_data = data;
}

PNode JosephCircle(PNode pHead, size_t M)
{
	PNode pCur = NULL;
	PNode pDel = NULL;

	int count = M;
	if(NULL == pHead || NULL == pHead->_pNext)
		return pHead;

	// 构环
	pCur = pHead;
	while(pCur->_pNext)
		pCur = pCur->_pNext;

	pCur->_pNext = pHead;
	pCur = pHead;
	while(pCur != pCur->_pNext)
	{
		// 报数--->M
		count = M;
		while(--count)
		{
			pCur = pCur->_pNext;
		}

		// 替换法删结点
		pDel = pCur->_pNext;
		pCur->_data = pDel->_data;
		pCur->_pNext = pDel->_pNext;
		free(pDel);
	}

	// 解环
	pCur->_pNext = NULL;
	return pCur;
}


// 1---2--->3--->4--->5--->NULL
// 简单方式
/*
PNode ReverseList(PNode pHead)
{
	PNode pPre = NULL;
	PNode pCur = NULL;
	PNode pNext = NULL;

	if(NULL == pHead || NULL == pHead->_pNext)
		return pHead;

	// 多个结点
	pPre = pHead;
	pCur = pPre->_pNext;
	pNext = pCur->_pNext;
	pHead->_pNext = NULL;

	while(pNext)
	{
		pCur->_pNext = pPre;
		pPre = pCur;
		pCur = pNext;
		pNext = pCur->_pNext;
	}

	pCur->_pNext = pPre;
	return pCur;
}
*/

// 11:20---> 如果链表带环
PNode ReverseList(PNode pHead)
{
	PNode pPre = NULL;
	PNode pCur = NULL;
	PNode pNewHead = NULL;
	if(NULL == pHead || NULL == pHead->_pNext)
		return pHead;

	pPre = pHead;
	pCur = pPre->_pNext;

	while(pCur)
	{
		pPre->_pNext = pNewHead;
		pNewHead = pPre;
		pPre = pCur;
		pCur = pCur->_pNext;
	}

	pPre->_pNext = pNewHead;
	pNewHead = pPre;

	return pNewHead;
}

PNode FindMidNode(PNode pHead)
{
	PNode pSlow = pHead;
	PNode pFast = pHead;
	while(pFast && pFast->_pNext)
	{
		pSlow = pSlow->_pNext;
		pFast = pFast->_pNext->_pNext;
	}

	return pSlow;
}

void BubbleSort(PNode pHead)
{
	PNode pTail = NULL;
	PNode pCur = pHead;
	PNode pPreCur = NULL;
	int isChange = 0;
	if(NULL == pHead || NULL == pHead->_pNext)
		return;

	// 冒泡的次数
	while(pHead != pTail)
	{
		isChange = 0;
		// 单趟冒泡
		pPreCur = pHead;
		pCur = pHead->_pNext;
		while(pCur != pTail)
		{
			if(pPreCur->_data > pCur->_data)
			{
				DataType temp = pCur->_data;
				pCur->_data = pPreCur->_data;
				pPreCur->_data = temp;
				isChange = 1;
			}

			pPreCur = pCur;
			pCur = pCur->_pNext;
		}

		if(!isChange)
			return;

		pTail = pPreCur;
	}
}

PNode MergeList(PNode pHead1, PNode pHead2)
{
	PNode pNewHead = NULL;
	PNode pL1 = pHead1;
	PNode pL2 = pHead2;
	PNode pTailNode = NULL;

	if(NULL == pHead1)
		return pHead2;

	if(NULL == pHead2)
		return pHead1;

	// 将新链表的头指针指向正确的结点
	if(pL1->_data < pL2->_data)
	{
		pNewHead = pL1;
		pTailNode = pL1;
		pL1 = pL1->_pNext;
	}
	else
	{
		pNewHead = pL2;
		pTailNode = pL2;
		pL2 = pL2->_pNext;
	}

	// 
	while(pL1 && pL2)
	{
		if(pL1->_data < pL2->_data)
		{
			pTailNode->_pNext = pL1;
			pL1 = pL1->_pNext;
		}
		else
		{
			pTailNode->_pNext = pL2;
			pL2 = pL2->_pNext;
		}

		pTailNode = pTailNode->_pNext;
	}

	// 
	if(pL1)
		pTailNode->_pNext = pL1;

	if(pL2)
		pTailNode->_pNext = pL2;

	return pNewHead;
}

// 删除倒数第K个结点？
PNode FindLastKNode(PNode pHead, int K)
{
	PNode pFast = pHead;
	PNode pSlow = pHead;
	if(NULL == pHead || K <= 0)
		return NULL;

	// 链表存在  K(2)：小于结点个数  大于结点个数
	while(--K)
	{
		if(NULL == pFast)
			return NULL;

		pFast = pFast->_pNext;
	}

	// 两个指针同时走
	while(pFast->_pNext)
	{
		pFast = pFast->_pNext;
		pSlow = pSlow->_pNext;
	}

	return pSlow;
}

PNode HasCircle(PNode pHead)
{
	PNode pFast = pHead;
	PNode pSlow = pHead;

	while(pFast && pFast->_pNext)
	{
		pSlow = pSlow->_pNext;
		pFast = pFast->_pNext->_pNext;

		if(pFast == pSlow)
			return pFast;
	}

	return NULL;
}

int GetCircleLen(PNode pHead)
{
	int count = 1;
	PNode pMeetNode = HasCircle(pHead);
	PNode pCur = pMeetNode;
	if(NULL == pMeetNode)
		return 0;

	// 带环
	while(pCur->_pNext != pMeetNode)
	{
		count++;
		pCur = pCur->_pNext;
	}

	return count;
}

PNode GetEnterNode(PNode pHead, PNode pMeetNode)
{
	PNode pH = pHead;
	PNode pM = pMeetNode;
	if(NULL == pHead || NULL == pMeetNode)
		return NULL;

	while(pH != pM)
	{
		pH = pH->_pNext;
		pM = pM->_pNext;
	}

	return pM;
}

int IsCrossWithoutCircle(PNode pHead1, PNode pHead2)
{
	PNode pTail1 = pHead1;
	PNode pTail2 = pHead2;

	if(NULL == pTail1 || NULL == pTail2)
		return 0;

	while(pTail1->_pNext)
		pTail1 = pTail1->_pNext;

	while(pTail2->_pNext)
		pTail2 = pTail2->_pNext;

	if(pTail1 == pTail2)
		return 1;

	return 0;
}

PNode GetCrossNodeWithoutCircle(PNode pHead1, PNode pHead2)
{
	int size1 = 0;
	int size2 = 0;
	PNode pCur1 = pHead1;
	PNode pCur2 = pHead2;
	int gap = 0;
    if(!IsCrossWithoutCircle(pHead1, pHead2))
	    return NULL;

	size1 = Size(pHead1);
	size2 = Size(pHead2);

	gap = size1 - size2;
	if(gap > 0)
	{
		while(gap--)
			pCur1 = pCur1->_pNext;
	}
	else
	{
		// gap == 0  gap < 0
		while(gap++)
			pCur2 = pCur2->_pNext;
	}

	while(pCur1 != pCur2)
	{
		pCur1 = pCur1->_pNext;
		pCur2 = pCur2->_pNext;
	}

	return pCur1;
}

PNode Back(PNode pHead)
{
	PNode pTailNode = pHead;
	if(NULL == pHead)
		return NULL;

	while(pTailNode->_pNext)
		pTailNode = pTailNode->_pNext;

	return pTailNode;
}

int IsCrossWithCircle(PNode pHead1, PNode pHead2)
{
	PNode pMeet1 = HasCircle(pHead1);
	PNode pMeet2 = HasCircle(pHead2);

	// 都不带环
	if(NULL == pMeet1 && NULL == pMeet2)
	{
		if(Back(pHead1) == Back(pHead2))
			return 1;
	}
	else if(pMeet1 && pMeet2)
	{
		PNode pCur = pMeet1;
		while(pCur->_pNext != pMeet1)
		{
			if(pCur == pMeet2)
				return 2;

			pCur = pCur->_pNext;
		}

		if(pCur == pMeet2)
			return 2;
	}

	return 0;
}

/////////////////////////////////
void TestList11()
{
	PNode pHead1, pHead2, pTail;
	InitList(&pHead1);
	PushBack(&pHead1, 1);
	PushBack(&pHead1, 2);
	PushBack(&pHead1, 3);
	PushBack(&pHead1, 4);
	PushBack(&pHead1, 5);
	PushBack(&pHead1, 6);

	pTail = Back(pHead1);
	pTail->_pNext = Find(pHead1, 4);

	InitList(&pHead2);
	PushBack(&pHead2, 7);
	PushBack(&pHead2, 8);
	pTail = Back(pHead2);
	pTail->_pNext = Find(pHead1, 3);

	if(IsCrossWithCircle(pHead1, pHead2))
	{
		printf("两个链表相交\n");
	}
	else
	{
		printf("两个链表不相交\n");
	}
}

void TestList10()
{
	PNode pHead1, pHead2, pTail;
	InitList(&pHead1);
	PushBack(&pHead1, 1);
	PushBack(&pHead1, 2);
	PushBack(&pHead1, 3);
	PushBack(&pHead1, 4);
	PushBack(&pHead1, 5);
	PushBack(&pHead1, 6);

	InitList(&pHead2);
	PushBack(&pHead2, 2);
	PushBack(&pHead2, 4);
	PushBack(&pHead2, 5);

	pTail = Back(pHead2);
	pTail->_pNext = Find(pHead1, 4);

	if(IsCrossWithoutCircle(pHead1, pHead2))
	{
		printf("两个链表相交\n");
	}
	else
	{
		printf("两个链表不相交\n");
	}

	pTail = GetCrossNodeWithoutCircle(pHead1, pHead2);
}

void TestList9()
{
	PNode pHead1, pLastK;
	InitList(&pHead1);
	PushBack(&pHead1, 1);
	PushBack(&pHead1, 2);
	PushBack(&pHead1, 3);
	PushBack(&pHead1, 4);
	PushBack(&pHead1, 5);
	PushBack(&pHead1, 6);
	PrintList(pHead1);
	pLastK = FindLastKNode(pHead1, 2);
	if(pLastK)
	{
		printf("%d\n", pLastK->_data);
	}
	else
	{
		printf("没有找到");
	}
}

void TestList8()
{
	PNode pHead1, pHead2;
	InitList(&pHead1);
	PushBack(&pHead1, 2);
	PushBack(&pHead1, 3);
	PushBack(&pHead1, 6);
	PushBack(&pHead1, 8);
	PrintList(pHead1);

	InitList(&pHead2);
	PushBack(&pHead2, 1);
	PushBack(&pHead2, 2);
	PushBack(&pHead2, 4);
	PushBack(&pHead2, 7);
	PrintList(pHead2);

	pHead1 = MergeList(pHead1, pHead2);
	PrintList(pHead1);
}

void TestList7()
{
	PNode pHead;
	PNode pMidNode;
	InitList(&pHead);
	PushBack(&pHead, 5);
	PushBack(&pHead, 2);
	PushBack(&pHead, 3);
	PushBack(&pHead, 1);
	PushBack(&pHead, 4);
	PrintList(pHead);
	BubbleSort(pHead);
	PrintList(pHead);
}

void TestList6()
{
	PNode pHead;
	PNode pMidNode;
	InitList(&pHead);
	PushBack(&pHead, 1);
	PushBack(&pHead, 2);
	PushBack(&pHead, 3);
	PushBack(&pHead, 4);
	PushBack(&pHead, 5);
	//PushBack(&pHead, 6);
	PrintList(pHead);
	pMidNode = FindMidNode(pHead);
	PrintList(pHead);
}

void TestList5()
{
	PNode pHead;
	InitList(&pHead);
	PushBack(&pHead, 1);
	PushBack(&pHead, 2);
	PushBack(&pHead, 3);
	PushBack(&pHead, 4);
	PushBack(&pHead, 5);
	PushBack(&pHead, 6);
	PrintList(pHead);
	pHead = ReverseList(pHead);
	PrintList(pHead);
}

void TestList4()
{
	PNode pHead;
	PNode pos = NULL;
	InitList(&pHead);
	PushBack(&pHead, 1);
	PushBack(&pHead, 2);
	PushBack(&pHead, 3);
	PushBack(&pHead, 4);
	PushBack(&pHead, 5);
	PushBack(&pHead, 6);
	PrintList(pHead);
	pHead = JosephCircle(pHead, 3);
	PrintList(pHead);
}

void TestList()
{
	PNode pHead;
	PNode pos = NULL;
	InitList(&pHead);
	PushBack(&pHead, 1);
	PushBack(&pHead, 2);
	PushBack(&pHead, 3);
	PrintList(pHead);

	pos = Find(pHead, 2);//
	Erase(&pHead, pos);
	PrintList(pHead);

	pos = Find(pHead, 1);//
	Erase(&pHead, pos);
	PrintList(pHead);


	Insert(pos, 4);

	PushFront(&pHead, 0);
	PrintList(pHead);

	PopFront(&pHead);
	PrintList(pHead);

	PopBack(&pHead);
	PopBack(&pHead);
	PopBack(&pHead);
	PopBack(&pHead);
	PrintList(pHead);

	PushFront(&pHead, 0);
	PrintList(pHead);

	DestroyList(&pHead);
}

void TestList2()
{
	PNode pHead;
	InitList(&pHead);
	PushBack(&pHead, 1);
	PushBack(&pHead, 2);
	PushBack(&pHead, 3);
	PushBack(&pHead, 4);
	PrintList(pHead);
	PrintListFromTail2Head(pHead);
	DestroyListFromTail2Head(&pHead);
	//DestroyList(&pHead);
}

void TestList3()
{
	PNode pHead;
	InitList(&pHead);
	PushBack(&pHead, 1);
	PushBack(&pHead, 2);
	PushBack(&pHead, 3);
	PushBack(&pHead, 4);

	PrintList(pHead);
	DeleteNotTailNode(Find(pHead, 3));
	PrintList(pHead);

	InsertNotHead(Find(pHead, 4), 3);
	PrintList(pHead);
	InsertNotHead(Find(pHead, 1), 0);
	PrintList(pHead);

	DestroyListFromTail2Head(&pHead);
	//DestroyList(&pHead);
}

int main()
{
	TestList11();
	//TestList10();
	//TestList9();
	//TestList8();
	//TestList7();
	//TestList6();
	//TestList5();
	//TestList4();
	//TestList3();
	//TestList2();
	//TestList();
	return 0;
}
